package ml.classifiers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import ml.data.DataSet;
import ml.data.Example;

/**
 * An all-vs-all multi-class classifier. Designed to utilize any type of binary
 * classifier as its "sub"-models.
 * 
 * @author Aidan Garton
 *
 */
public class AVAClassifier implements Classifier {
	private ClassifierFactory factory;
	private HashSet<Double> labels;
	private HashMap<String, Classifier> classifs;

	/**
	 * Simple 1-param constructor that instantiates factory variable
	 * 
	 * @param factory this generates meta/sub binary models
	 */
	public AVAClassifier(ClassifierFactory factory) {
		this.factory = factory;
	}

	/**
	 * Trains an AVA classifier using binary models generated by factory. This model
	 * trains (#classes choose 2) models, on for each label pair, and stores it in a
	 * hashmap with a key denoting its label pair.
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void train(DataSet data) {
		classifs = new HashMap<String, Classifier>();
		ArrayList<Double> usedLabels = new ArrayList<Double>();

		labels = new HashSet<Double>(data.getLabels());
		Iterator<Double> iter1 = labels.iterator();

		while (iter1.hasNext()) {
			double label1 = iter1.next();
			usedLabels.add(label1);

			Iterator<Double> iter2 = labels.iterator();

			while (iter2.hasNext()) {
				double label2 = iter2.next();
				if (!usedLabels.contains(label2)) {

					// construct dataset for pair of labels
					DataSet AVADataSet = new DataSet((HashMap<Integer, String>) data.getFeatureMap().clone());
					ArrayList<Example> dataCopy = (ArrayList<Example>) data.getData().clone();

					for (int i = 0; i < dataCopy.size(); i++) {

						Example currEx = dataCopy.get(i);

						// add all copies of examples that have class label1 or label2
						if (currEx.getLabel() == label1 || currEx.getLabel() == label2) {
							Example newEx = new Example(dataCopy.get(i));
							newEx.setLabel(currEx.getLabel() == label1 ? 1 : -1);
							AVADataSet.addData(newEx);
						}
					}

					// train a binary classifier on this new data set
					Classifier c = factory.getClassifier();
					c.train(AVADataSet);
					String key = label1 + ":" + label2;
					classifs.put(key, c);
					System.out.println("Done training classifier: " + label1 + ", " + label2);
				}
			}
		}
	}

	/**
	 * Classifies a piece of data by running it through each of the binary models
	 * trained above. The classifier with the highest positive confidence is used to
	 * classify the label.
	 */
	@Override
	public double classify(Example example) {
		HashMap<String, Double> scores = new HashMap<String, Double>();

		for (int i = 0; i < 20; i++) {
			scores.put((double) i + "", 0.0);
		}

		for (String key : classifs.keySet()) {

			String[] labels = key.split(":");
			double l1 = Double.parseDouble(labels[0]);
			double l2 = Double.parseDouble(labels[1]);

			Classifier c = classifs.get(key);

			// update scores of each class type weighted by their confidence from this
			// classifier. If y < 0, then label 2 is predicted so increase label 2 score and
			// decrease label1 score. The reverse happens if y > 0
			double y = c.classify(example) * c.confidence(example);
			scores.put(l1 + "", scores.get(l1 + "") + y);
			scores.put(l2 + "", scores.get(l2 + "") - y);
		}

		String cKey = "";
		double max = -100000000;

		for (String key : scores.keySet()) {
			if (scores.get(key) > max) {
				cKey = key;
				max = scores.get(key);
			}
		}
		return Double.parseDouble(cKey);
	}

	@Override
	public double confidence(Example example) {
		return 0;
	}

	public static void main(String[] args) {
		DataSet data = new DataSet("../assign5-starter/data/wines.train", DataSet.TEXTFILE);
		ClassifierFactory factory = new ClassifierFactory(ClassifierFactory.DECISION_TREE, 5);

		AVAClassifier ava = new AVAClassifier(factory);
//		ava.train(data);

		ClassifierTimer.timeClassifier(ava, data, 10);

//		System.out.println(data.getData().get(47).getLabel());
//		ava.classify(data.getData().get(47));

//		double correct = 0, total = 0;
//		for (Example e : data.getData()) {
//			total++;
//			if (ava.classify(e) == e.getLabel()) {
//				correct++;
//			}
//		}
//		System.out.println("accuracy: " + correct / total * 100);
//		System.out.println(correct);
//		System.out.println(total);
	}

}
